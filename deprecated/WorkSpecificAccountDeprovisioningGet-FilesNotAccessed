<#
.Synopsis
Checks last modified time on files
.DESCRIPTION
Reads the log generated by 'Remove-DeprovisionedUser' and checks the files in the homedirectory of the deprovisioned user have not been modified since xx days.  Two log files are produced: c:\Get-FilesNotAccessed.log and c:\Get-FilesNotAccessed.err
.PARAMETER DaysSinceLastAccessed
Files accessed since xxx days ago specified by this parameter.  In other words, "Show me any files that were accessed between XX days ago and today"  The reason being is that if any files were recently accessed, then we do not want to delete the directory.
.PARAMETER UserType
Staff or Student.  Determines the file paths to check to the home directories held in the 'Awaiting Deletion' holding area
.PARAMETER Logfile
This is the path to the log file produced by 'Remove-DeprovisionedUser'  If you haven't changed any defaults then the default location is used (c:\)
.EXAMPLE
Get-FilesNotAccessed -UserType Staff -Verbose

The above command shows typical usage and will display any staff files that have been accessed between 365 days ago and todays date.
.EXAMPLE
Get-FilesNotAccessed -UserType Student -DaysSinceLastAccessed 260 -Verbose

The above command shows typical usage and will display any student files that have been accessed between 260 days ago and todays date.
.INPUTS
None.  You cannot pipe objects to Get-UserForDeprovisioning.
.NOTES
Version: 1.0
Date: 15 May 2015
Created By: OH
.LINK
Remove-DeprovisionedUser
.LINK
Move-DeprovisionedHomeDirectories
.LINK
Get-UserForDeprovisioning
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
#>

Function Get-FilesNotAccessed {
[CmdletBinding()]
        
    Param(              
        [PARAMETER(Mandatory=$false)]
        [int]$DaysSinceLastAccessed = 365,        

        [PARAMETER(Mandatory=$True)]
        [ValidateSet("Staff","Student")]                  
        [string]$UserType,
        
        [PARAMETER(Mandatory=$false,
        ValueFromPipeline=$True,ValueFromPipelineByPropertyName=$true)]
        $LogFile = 'C:\Remove-DeprovisionedUser.log'
        )


    BEGIN {
        $date = (get-date).AddDays(-$DaysSinceLastAccessed)        

        if ($usertype = "Staff") {
            $Path = '\\server\path\todelete'
        } else {
            $Path = '\\server\path\todelete'
        }   


        #Initialise Logs
        $(get-date)| out-file "c:\Get-FilesNotAccessed.log" -Encoding ascii -Append
        $(get-date)| out-file "c:\Get-FilesNotAccessed.err" -Encoding ascii -Append
             

    }#end BEGIN


    PROCESS {
        foreach ($user in (get-content $logfile) | select -Skip 1) {
                write-output "Checking: $user"         
                
                try {               
                    foreach ($file in (get-childitem "$path\$user" -File -Recurse -ea Stop)) {
                    write-verbose "$($file.fullname)"
                        if ($file.LastWriteTime -GT $date) { 
                            write-warning "File has been accessed!"
                            write-warning "-----------------------"
                            write-warning "User: $user"
                            write-warning "File: $($file.fullName) accessed: $($file.LastWriteTime)"
                            write-warning ""
                            $user | out-file "c:\Get-FilesNotAccessed.log" -Encoding ascii -Append
                            "File: $($file.fullName) accessed: $($file.LastWriteTime)" | out-file "c:\Get-FilesNotAccessed.log" -Encoding ascii -Append
                            "" | out-file "c:\Get-FilesNotAccessed.log" -Encoding ascii -Append
                        } 
                    }#end inner Foreach
                 } catch {
                                write-error "Unable to check: $path\$user"
                                "Unable to check: $path\$user" | out-file "c:\Get-FilesNotAccessed.err" -Encoding ascii -Append
                                $_ | out-file "c:\Get-FilesNotAccessed.err" -Encoding ascii -Append
                                "" | out-file "c:\Get-FilesNotAccessed.err" -Encoding ascii -Append
                 }#end try                 
         }#end outer foreach         
    }#end PROCESS

    END {
        #Write date \ time to log files
        $(get-date)| out-file "c:\Get-FilesNotAccessed.log" -Encoding ascii -Append
        $(get-date)| out-file "c:\Get-FilesNotAccessed.err" -Encoding ascii -Append
    }#end END

}#end function
