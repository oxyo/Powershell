<#
.Synopsis
Gets users that can be deprovisioned in A.D
.DESCRIPTION
Creates a filtered result of users either staff or students that meet predertmined criterea that can be deleted in Active Directory.  A log of SamAccountNames is created: c:\Get-UserForDeprovisioning.log
.PARAMETER UserType
Used for targeting either staff or student accounts.
.PARAMETER DaysExpired
The number of days subtracted from todays date.  The resultant date is used in the filter to only get accounts whose AccountExpirationDate is less than or equal to this date.
.PARAMETER DoNotDisplayUsers
If you specify this switch then the only output will be the total number of users that can be deleted.  If you do not use this switch then the user account data will be output as well as the total count.
Do NOT use this switch if you will be piping the output to another function \ cmdlet.
.EXAMPLE
Get-UserForDeProvisioning -UserType Student -DaysExpired 540 -DoNotDisplayUsers

The above command will produce a total count of the number of student users whose accounts have an expiry date of 540 days from todays date (or earlier)
.EXAMPLE
Get-UserForDeProvisioning -UserType Staff -DaysExpired 360

The above command will produce a total count of the number of staff users whose accounts have an expiry date of 360 days from todays date (or earlier) and will also display the SamAccountName property for each user.
.INPUTS
None.  You cannot pipe objects to Get-UserForDeprovisioning.
.OUTPUTS
Microsoft.ActiveDirectory.Management.ADUser
.NOTES
Version: 1.6
Date: 12 May 2015
Created By: OH
.LINK
Remove-DeprovisionedUser
.LINK
Move-DeprovisionedHomeDirectories
.LINK
Get-FilesNotAccessed
.LINK
http://www.fearthemonkey.co.uk
.LINK
https://github.com/ozthe2/Powershell.git
#>

Function Get-UserForDeProvisioning {

    [CmdletBinding()]
        
    Param(              
        [PARAMETER(Mandatory=$True)]
        [ValidateSet("Staff","Student")]                  
        [string]$UserType,

        [PARAMETER(Mandatory=$True)]
        [int]$DaysExpired,
            
        [PARAMETER(Mandatory=$False)]
        [Switch]$DoNotDisplayUsers
        )

    BEGIN {         
        #Staff accounts Target deletion date is 12 months from current date, Students 18 months from current date.
        #Also set the search root for Get-ADUser and then get the users based on different filter criterea
        if ($usertype -eq "Staff") {            
            [datetime]$TargetDeletionDate = (get-date).AddDays(-$DaysExpired)
            $SearchRoot='ou=XXX,ou=XXX,ou=XXX,ou=XXX,dc=XXX,dc=XXX'            
        } else {            
            [datetime]$TargetDeletionDate = (get-date).AddDays(-$DaysExpired)                       
            $SearchRoot='ou=XXX,ou=XXX,ou=XXX,ou=XXX,dc=XXX,dc=XXX'
        }


        #Get users based on our filter criterea (Had to do this as a where clause...I originally coded this as a filter, however I could not test for $NULL on a date attribute within a filter as it is not allowed!
        $Users = Get-ADUser -Filter *  -properties sn,displayname,accountexpirationdate,enabled,mail,lastlogondate,accountexpires,userPrincipalName,pwdlastset,employeeNumber,employeeType,whencreated,LastLogonTimeStamp -SearchBase $SearchRoot -SearchScope OneLevel | ? {($_.AccountExpirationDate -ge "01/01/2000" -and $_.AccountExpirationDate -le $targetdeletiondate) -and $_.employeeType -eq $usertype -and $_.whencreated -le $targetdeletiondate -and (($_.Lastlogondate -ge "01/01/2000" -and $_.lastlogondate -le $targetdeletiondate) -or $_.lastlogondate -eq $NULL)}

            
        #Check that employee numbers are within the accepted range and add users to array: FinalFilteredUsers - THIS ARRAY HOLDS THE FINAL USERS AFTER ALL FILTERS HAVE BEEN APPLIED        
        $FinalFilteredUsers=@()
        
        #Staff accounts...
        if ($usertype -eq "Staff") {
            foreach ($user in $Users) {
                if ([long]$user.employeenumber -ge 00001 -and [long]$user.employeenumber -le 89999) {            
                    $FinalFilteredUsers+=$user
                }
             }#end foreach
        } else {
            foreach ($user in $Users) {
                if (([long]$user.employeenumber -ge 10000000 -and [long]$user.employeenumber -le 49999999) -or ([long]$user.employeenumber -ge 95000000 -and [long]$user.employeenumber -le 96999999)) {                            
                    $FinalFilteredUsers+=$user
                }
             }#end foreach
        }#end else

        $(get-date)| out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
        $message = "$($FinalFilteredUsers.count) Users can be deleted."
        $message | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append

    }#End Begin

    PROCESS {
        #Create users as objects for output here...
        if (!$DoNotDisplayUsers){            
            $FinalFilteredUsers.samaccountname | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
            $FinalFilteredUsers.samaccountname            
        }else {
            $message
        }
            
    }#End PROCESS

    END {        
      <#  if ($usertype -eq "Staff") {            
            write-output "$($FinalFilteredUsers.count) STAFF users are able to be deleted from Active Directory." | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
            write-output "$($FinalFilteredUsers.count) STAFF users are able to be deleted from Active Directory." 
            write-output "" | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
        } else {            
            write-output "$($FinalFilteredUsers.count) STUDENT users are able to be deleted from Active Directory." | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
            write-output "$($FinalFilteredUsers.count) STUDENT users are able to be deleted from Active Directory."
            write-output "" | out-file "c:\Get-UserForDeprovisioning.log" -Encoding ascii -Append
        } #>   
    }#End END  
}#End DeProvision-User
