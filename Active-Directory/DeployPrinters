#Requires -Version 3.0

#region General Script Info
<#
Author: OH
Date:   17 November 2014
Rev.    1.4

Purpose: Reads the Group Policy preference item for printers 
         and deploys \ deletes printers via Powershell script.



Change Log:
rev 1.4 Some targeting may include one or more 'OR' conditions.  Eg the computer must exist in this OU OR that OU.  This is now taken care of in the script.
rev 1.3 Fixed setting default printer.
rev 1.2 Added a check to see if there is a printer that is not targeted.  In other words, a printer that is deployed to all users that receive the GPO.
#>
#endregion

function Deploy-OHPrinters {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]                       
        [String]
        $GPOGuid        
    )

    BEGIN {
         $Domain = (Get-OHDomainInfo).Domain
        [xml]$PrintersXml = Get-Content "\\$Domain\sysvol\$Domain\Policies\$GPOGuid\User\Preferences\Printers\Printers.xml"        
        $ComputerOU = (Get-OHDomainInfo).ComputerOU        
        
        #GPP Target object info (Added for code readability)
        [int]$Computer = 0
        [int]$User = 1 
    }

    PROCESS {
        foreach ($Printer in $PrintersXml.Printers.SharedPrinter) {
            #If there is no targeting information and printer is set to create or update ie, this printer is targeted to everyone that receives this GPO...
            if ($printer.filters.ChildNodes.UserContext -eq $NULL -and ($printer.Properties.action -eq 'C' -or $printer.Properties.action -eq 'U')) {
                if ($printer.Properties.default -eq 1) {
                    Add-OHPrinter -Printer $Printer.Properties.path -Default    
                } else {
                    Add-OHPrinter -Printer $Printer.Properties.path
                }  
            }

            #Continue only if the target item in the GPP policy is against a computer object.
            if ($printer.filters.ChildNodes.UserContext -eq $Computer) {
                #The following 'foreach' line: The GPO could contain an 'or' target. eg 'If the computer exists in this OU OR that OU' so we had better check this... 
                foreach ($OUTarget in $printer.filters.ChildNodes.Name) {
                    if ($OUTarget -eq $computerOU){
                        switch ($Printer.Properties.action) {
                           'C' {                            
                                   if ($printer.Properties.default -eq 1) {
                                       Add-OHPrinter -Printer $Printer.Properties.path -Default    
                                   } else {
                                       Add-OHPrinter -Printer $Printer.Properties.path
                                   }  
                               }#end 'Create'
                           'U' {
                                   if ($printer.Properties.default -eq 1) {
                                       Add-OHPrinter -Printer $Printer.Properties.path -Default    
                                   } else {
                                       Add-OHPrinter -Printer $Printer.Properties.path
                                   } 
                               }#end 'Update'
                           'D' {
                                   Delete-OHPrinter -Printer $Printer.Properties.path
                               }#end 'Delete'                
                        }#end Switch            
                    }#End Inner If 
                }#end inner foreach
            }#End Outer If 
        }#end outer foreach    
    }#end process
}#end function

function Add-OHPrinter {
#region Function Notes
<#
Using the com-object model for creating a printer connection
as we are using Powershell 3.0 here with Win 7SP1 Computers.
#>
#endregion
    [CmdletBinding()]    
    Param
    (        
        [Parameter(Position=0)]
        [String[]]
        $Printer,        
        
        [switch]
        $Default
    )
    
    BEGIN {
        Write-verbose "Creating COM object"
        $Printers = New-Object -ComObject WScript.Network 
    }


    PROCESS {
        foreach ($p in $Printer) {
            Write-Verbose "Adding the printer"
            $Printers.AddWindowsPrinterConnection($p)

            If ($default) {
                Write-verbose "Setting default printer"
                $Printers.SetDefaultPrinter($p)
            }
        }#end foreach
    }#end process

    END {}

}

function Delete-OHPrinter {
#region Function Notes
<#
Using the com-object model for deleting a printer connection
as we are using Powershell 3.0 here with Win 7SP1 Computers.
#>
#endregion
    [CmdletBinding()]    
    Param
    (        
        [Parameter(Position=0)]
        [String[]]
        $Printer
    )
    
    BEGIN {
        Write-verbose "Creating COM object"
        $Printers = New-Object -ComObject WScript.Network 
    }


    PROCESS {
        foreach ($p in $Printer) {
            Write-Verbose "Deleting the printer"
            $Printers.RemovePrinterConnection($p)
        }#end foreach
    }#end process

    END {}

}

function Get-OHDomainInfo {
#region Function Notes
<#
    Using this method to obtain the Computer OU and Domain as this script
    is run on domain computers that do not have access to the Active Directory powershell module.
    Otherwise, we could have used Get-ADComputer and this whole function would have been
    a lot easier and more 'readable'...
#>
#endregion
    $objDomain = New-Object System.DirectoryServices.DirectoryEntry  
    $strFilter = "(&(objectCategory=computer)(name=" + $env:computername + "))"

    $objSearcher = New-Object System.DirectoryServices.DirectorySearcher  
    $objSearcher.SearchRoot = $objDomain  
    $objSearcher.Filter = $strFilter

    $ComputerOU = $objSearcher.FindOne().Path

    $pos = $ComputerOU.indexOf(",")
                
    #Now get the domain...
    [string]$Domain = $objdomain.distinguishedName
    $domain = $domain.Replace("DC=","")
    $domain = $domain.Replace(",",".")

    #And the OU the computer belongs to...
    $ComputerOU=$ComputerOU.substring($pos+1)

    #Return an object...
    [PSCustomObject] @{
        Domain = $Domain
        ComputerOU = $ComputerOU            
        PSTypename = 'MyTypes.OHComputerDomainInfo'
    }
}

#Entry point to the script
Deploy-OHPrinters -GPOGuid "{4B6DDE1D-ADF1-4539-B382-60B2A53A4A72}"
